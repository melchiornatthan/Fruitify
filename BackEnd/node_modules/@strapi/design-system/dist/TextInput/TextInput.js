var F = Object.defineProperty;
var a = Object.getOwnPropertySymbols;
var u = Object.prototype.hasOwnProperty, b = Object.prototype.propertyIsEnumerable;
var f = (e, r, t) => r in e ? F(e, r, { enumerable: !0, configurable: !0, writable: !0, value: t }) : e[r] = t, v = (e, r) => {
  for (var t in r || (r = {}))
    u.call(r, t) && f(e, t, r[t]);
  if (a)
    for (var t of a(r))
      b.call(r, t) && f(e, t, r[t]);
  return e;
};
var E = (e, r) => {
  var t = {};
  for (var o in e)
    u.call(e, o) && r.indexOf(o) < 0 && (t[o] = e[o]);
  if (e != null && a)
    for (var o of a(e))
      r.indexOf(o) < 0 && b.call(e, o) && (t[o] = e[o]);
  return t;
};
import n, { useRef as R, useImperativeHandle as h } from "react";
import i from "prop-types";
import { Field as O } from "../Field/Field.js";
import { FieldLabel as q } from "../Field/FieldLabel.js";
import { FieldInput as w } from "../Field/FieldInput.js";
import { FieldHint as z } from "../Field/FieldHint.js";
import { FieldError as k } from "../Field/FieldError.js";
import "../Field/FieldContext.js";
import "../Field/FieldAction.js";
import { Stack as H } from "../Stack/Stack.js";
import { sizes as P } from "../themes/sizes.js";
import { useId as _ } from "../helpers/useId.js";
const m = n.forwardRef(
  (j, p) => {
    var s = j, { size: e, startAction: r, endAction: t, name: o, hint: g, error: I, label: l, labelAction: T, id: y, required: A } = s, d = E(s, ["size", "startAction", "endAction", "name", "hint", "error", "label", "labelAction", "id", "required"]);
    const x = _("textinput", y), c = R(null);
    if (!l && !d["aria-label"])
      throw new Error('The TextInput component needs a "label" or an "aria-label" props');
    return h(p, () => ({
      inputWrapperRef: c
    })), /* @__PURE__ */ n.createElement("div", {
      ref: c
    }, /* @__PURE__ */ n.createElement(O, {
      name: o,
      hint: g,
      error: I,
      id: x
    }, /* @__PURE__ */ n.createElement(H, {
      spacing: 1
    }, l && /* @__PURE__ */ n.createElement(q, {
      required: A,
      action: T
    }, l), /* @__PURE__ */ n.createElement(w, v({
      size: e,
      ref: p,
      startAction: r,
      endAction: t
    }, d)), /* @__PURE__ */ n.createElement(z, null), /* @__PURE__ */ n.createElement(k, null))));
  }
);
m.displayName = "TextInput";
m.defaultProps = {
  "aria-label": void 0,
  label: void 0,
  labelAction: void 0,
  error: void 0,
  hint: void 0,
  id: void 0,
  startAction: void 0,
  size: "M",
  endAction: void 0,
  required: !1
};
m.propTypes = {
  "aria-label": i.string,
  endAction: i.element,
  error: i.string,
  hint: i.oneOfType([i.string, i.node, i.arrayOf(i.node)]),
  id: i.string,
  label: i.string,
  labelAction: i.element,
  name: i.string.isRequired,
  required: i.bool,
  size: i.oneOf(Object.keys(P.input)),
  startAction: i.element
};
export {
  m as TextInput
};
