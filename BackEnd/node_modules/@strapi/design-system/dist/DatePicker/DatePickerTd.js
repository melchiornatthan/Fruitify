var y = Object.defineProperty;
var i = Object.getOwnPropertySymbols;
var c = Object.prototype.hasOwnProperty, m = Object.prototype.propertyIsEnumerable;
var p = (e, o, r) => o in e ? y(e, o, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[o] = r, u = (e, o) => {
  for (var r in o || (o = {}))
    c.call(o, r) && p(e, r, o[r]);
  if (i)
    for (var r of i(o))
      m.call(o, r) && p(e, r, o[r]);
  return e;
};
var s = (e, o) => {
  var r = {};
  for (var t in e)
    c.call(e, t) && o.indexOf(t) < 0 && (r[t] = e[t]);
  if (e != null && i)
    for (var t of i(e))
      o.indexOf(t) < 0 && m.call(e, t) && (r[t] = e[t]);
  return r;
};
import l from "react";
import n from "prop-types";
import g from "styled-components";
import "../RawTable/RawTable.js";
import { RawTd as $ } from "../RawTable/RawCell.js";
import "../RawTable/RawThead.js";
import "../RawTable/RawTbody.js";
import "../RawTable/RawTr.js";
import { Typography as d } from "../Typography/Typography.js";
const k = g.button`
  border: none;
  background: ${({ theme: e, isSelected: o }) => o ? e.colors.primary100 : e.colors.neutral0};
  height: ${32 / 16}rem;
  text-align: center;
  width: ${32 / 16}rem;
  border-radius: ${({ theme: e }) => e.borderRadius};

  // Trick to prevent the outline from overflowing because of the general outline-offset
  outline-offset: -2px;

  &:hover {
    background: ${({ theme: e }) => e.colors.primary100};
  }

  &:hover > ${d} {
    color: ${({ theme: e }) => e.colors.primary600};
  }
`, f = (T) => {
  var a = T, { children: e, outsideMonth: o, onSelectDay: r, isSelected: t } = a, b = s(a, ["children", "outsideMonth", "onSelectDay", "isSelected"]);
  const h = t ? "primary600" : o ? "neutral600" : "neutral900";
  return /* @__PURE__ */ l.createElement($, u({}, b), /* @__PURE__ */ l.createElement(k, {
    tabIndex: -1,
    onClick: r,
    isSelected: t,
    type: "button"
  }, /* @__PURE__ */ l.createElement(d, {
    variant: "pi",
    textColor: h,
    fontWeight: t ? "bold" : null
  }, e)));
};
f.defaultProps = {
  isSelected: !1,
  outsideMonth: !1
};
f.propTypes = {
  children: n.node.isRequired,
  isSelected: n.bool,
  onSelectDay: n.func.isRequired,
  outsideMonth: n.bool
};
export {
  f as DatePickerTd
};
