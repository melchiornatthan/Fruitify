import y, { useRef as m, useEffect as a, useMemo as w } from "react";
import c from "prop-types";
const E = ({ children: r, className: e, onEscapeKeyDown: i, onPointerDownOutside: o }) => {
  const s = m(null), d = l(i), u = l(o);
  return a(() => {
    const t = (n) => {
      n.key === "Escape" && d(n);
    };
    return document.addEventListener("keydown", t), () => document.removeEventListener("keydown", t);
  }, [d]), a(() => {
    const t = (n) => {
      const p = s.current.closest("[data-react-portal]"), f = n.target.closest("[data-react-portal]");
      s.current && !s.current.contains(n.target) && p === f && u();
    };
    return document.addEventListener("pointerdown", t), () => document.removeEventListener("pointerdown", t);
  }, [u]), /* @__PURE__ */ y.createElement("div", {
    ref: s,
    className: e
  }, r);
};
E.propTypes = {
  children: c.node.isRequired,
  className: c.string,
  onEscapeKeyDown: c.func.isRequired,
  onPointerDownOutside: c.func.isRequired
};
function l(r) {
  const e = m(r);
  return a(() => {
    e.current = r;
  }), w(
    () => (...i) => {
      var o;
      return (o = e.current) == null ? void 0 : o.call(e, ...i);
    },
    []
  );
}
export {
  E as DismissibleLayer
};
