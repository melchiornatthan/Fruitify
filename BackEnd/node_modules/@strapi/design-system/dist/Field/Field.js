var y = Object.defineProperty;
var d = Object.getOwnPropertySymbols;
var p = Object.prototype.hasOwnProperty, a = Object.prototype.propertyIsEnumerable;
var m = (e, o, r) => o in e ? y(e, o, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[o] = r, s = (e, o) => {
  for (var r in o || (o = {}))
    p.call(o, r) && m(e, r, o[r]);
  if (d)
    for (var r of d(o))
      a.call(o, r) && m(e, r, o[r]);
  return e;
};
var f = (e, o) => {
  var r = {};
  for (var i in e)
    p.call(e, i) && o.indexOf(i) < 0 && (r[i] = e[i]);
  if (e != null && d)
    for (var i of d(e))
      o.indexOf(i) < 0 && a.call(e, i) && (r[i] = e[i]);
  return r;
};
import l from "react";
import t from "prop-types";
import { FieldContext as T } from "./FieldContext.js";
import { useId as h } from "../helpers/useId.js";
const u = (O) => {
  var n = O, { children: e, name: o, error: r, hint: i, id: v } = n, c = f(n, ["children", "name", "error", "hint", "id"]);
  const g = h("field", v);
  return /* @__PURE__ */ l.createElement("div", s({}, c), /* @__PURE__ */ l.createElement(T.Provider, {
    value: { name: o, id: g, error: r, hint: i }
  }, e));
};
u.defaultProps = {
  error: void 0,
  hint: void 0,
  id: void 0,
  name: void 0
};
u.propTypes = {
  children: t.node.isRequired,
  error: t.string,
  hint: t.oneOfType([t.string, t.node, t.arrayOf(t.node)]),
  id: t.oneOfType([t.string, t.number]),
  name: t.string
};
export {
  u as Field
};
