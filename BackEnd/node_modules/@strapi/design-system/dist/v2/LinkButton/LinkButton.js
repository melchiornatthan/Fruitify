var x = Object.defineProperty, B = Object.defineProperties;
var T = Object.getOwnPropertyDescriptors;
var n = Object.getOwnPropertySymbols;
var u = Object.prototype.hasOwnProperty, b = Object.prototype.propertyIsEnumerable;
var c = (e, t, r) => t in e ? x(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r, v = (e, t) => {
  for (var r in t || (t = {}))
    u.call(t, r) && c(e, r, t[r]);
  if (n)
    for (var r of n(t))
      b.call(t, r) && c(e, r, t[r]);
  return e;
}, y = (e, t) => B(e, T(t));
var $ = (e, t) => {
  var r = {};
  for (var o in e)
    u.call(e, o) && t.indexOf(o) < 0 && (r[o] = e[o]);
  if (e != null && n)
    for (var o of n(e))
      t.indexOf(o) < 0 && b.call(e, o) && (r[o] = e[o]);
  return r;
};
import a from "react";
import L from "styled-components";
import i from "prop-types";
import { Typography as d } from "../../Typography/Typography.js";
import { Box as l } from "../../Box/Box.js";
import { getDisabledStyle as g, getHoverStyle as R, getActiveStyle as I, getVariantStyle as N } from "../../Button/utils.js";
import { BUTTON_SIZES as P, VARIANTS as W } from "../../Button/constants.js";
import { BaseButtonWrapper as w } from "../../BaseButton/BaseButton.js";
import { BaseLink as h } from "../../BaseLink/BaseLink.js";
const A = L(w)`
  padding: ${({ theme: e, size: t }) => `${t === "S" ? e.spaces[2] : "10px"} ${e.spaces[4]}`};
  background: ${({ theme: e }) => e.colors.buttonPrimary600};
  border: 1px solid ${({ theme: e }) => e.colors.buttonPrimary600};
  border-radius: ${({ theme: e }) => e.borderRadius};
  ${l} {
    display: flex;
    align-items: center;
  }
  ${d} {
    color: ${({ theme: e }) => e.colors.buttonNeutral0};
  }
  &[aria-disabled='true'] {
    ${g}
    &:active {
      ${g}
    }
  }
  &:hover {
    ${R}
  }
  &:active {
    ${I}
  }
  ${N}

  /**
    Link specific properties
  */
  display: inline-flex;
  text-decoration: none;
  pointer-events: ${({ disabled: e }) => e ? "none" : void 0};
`, s = a.forwardRef(
  (O, E) => {
    var p = O, { variant: e, startIcon: t, endIcon: r, disabled: o, children: f, size: m, as: S } = p, k = $(p, ["variant", "startIcon", "endIcon", "disabled", "children", "size", "as"]);
    return /* @__PURE__ */ a.createElement(A, y(v({
      ref: E,
      "aria-disabled": o,
      size: m,
      variant: e
    }, k), {
      as: S || h
    }), t && /* @__PURE__ */ a.createElement(l, {
      "aria-hidden": !0,
      paddingRight: 2
    }, t), m === "S" ? /* @__PURE__ */ a.createElement(d, {
      variant: "pi",
      fontWeight: "bold"
    }, f) : /* @__PURE__ */ a.createElement(d, {
      fontWeight: "bold"
    }, f), r && /* @__PURE__ */ a.createElement(l, {
      "aria-hidden": !0,
      paddingLeft: 2
    }, r));
  }
);
s.displayName = "LinkButton";
s.defaultProps = {
  as: h,
  disabled: !1,
  startIcon: void 0,
  endIcon: void 0,
  size: "S",
  variant: "default",
  onClick: void 0,
  href: void 0,
  to: void 0
};
s.propTypes = {
  as: i.elementType,
  children: i.node.isRequired,
  disabled: i.bool,
  endIcon: i.element,
  href: (e) => {
    if (!e.disabled && !e.to && !e.href)
      return new Error("href must be defined");
  },
  onClick: i.func,
  size: i.oneOf(P),
  startIcon: i.element,
  to: (e) => {
    if (!e.disabled && !e.href && !e.to)
      return new Error("to must be defined");
  },
  variant: i.oneOf(W)
};
export {
  s as LinkButton
};
