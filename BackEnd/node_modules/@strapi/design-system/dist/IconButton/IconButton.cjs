"use strict";var I=Object.defineProperty,R=Object.defineProperties;var x=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var m=Object.prototype.hasOwnProperty,E=Object.prototype.propertyIsEnumerable;var B=(e,l,t)=>l in e?I(e,l,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[l]=t,d=(e,l)=>{for(var t in l||(l={}))m.call(l,t)&&B(e,t,l[t]);if(s)for(var t of s(l))E.call(l,t)&&B(e,t,l[t]);return e},c=(e,l)=>R(e,x(l));var T=(e,l)=>{var t={};for(var o in e)m.call(e,o)&&l.indexOf(o)<0&&(t[o]=e[o]);if(e!=null&&s)for(var o of s(e))l.indexOf(o)<0&&E.call(e,o)&&(t[o]=e[o]);return t};Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const f=require("react"),w=require("prop-types"),H=require("styled-components"),V=require("../Tooltip/Tooltip.cjs"),C=require("../BaseButton/BaseButton.cjs"),F=require("../Flex/Flex.cjs"),_=require("../VisuallyHidden/VisuallyHidden.cjs"),b=e=>e&&typeof e=="object"&&"default"in e?e:{default:e},r=b(f),n=b(w),j=b(H),p=j.default(C.BaseButton)`
  display: flex;
  align-items: center;
  justify-content: center;
  height: ${32/16}rem;
  width: ${32/16}rem;

  svg {
    > g,
    path {
      fill: ${({theme:e})=>e.colors.neutral500};
    }
  }
  &:hover {
    svg {
      > g,
      path {
        fill: ${({theme:e})=>e.colors.neutral600};
      }
    }
  }
  &:active {
    svg {
      > g,
      path {
        fill: ${({theme:e})=>e.colors.neutral400};
      }
    }
  }
  &[aria-disabled='true'] {
    background-color: ${({theme:e})=>e.colors.neutral150};
    svg {
      path {
        fill: ${({theme:e})=>e.colors.neutral600};
      }
    }
  }
  ${({noBorder:e})=>e?"border: none;":void 0}
`,P=j.default(F.Flex)`
  & span:first-child button {
    border-left: 1px solid ${({theme:e})=>e.colors.neutral200};
    border-radius: ${({theme:e})=>`${e.borderRadius} 0 0 ${e.borderRadius}`};
  }

  & span:last-child button {
    border-radius: ${({theme:e})=>`0 ${e.borderRadius} ${e.borderRadius} 0`};
  }

  & ${p} {
    border-radius: 0;
    border-left: none;

    svg {
      path {
        fill: ${({theme:e})=>e.colors.neutral700};
      }
    }

    &:hover {
      background-color: ${({theme:e})=>e.colors.neutral100};

      svg {
        path {
          fill: ${({theme:e})=>e.colors.neutral800};
        }
      }
    }

    &:active {
      background-color: ${({theme:e})=>e.colors.neutral150};
      svg {
        path {
          fill: ${({theme:e})=>e.colors.neutral900};
        }
      }
    }

    &[aria-disabled='true'] {
      svg {
        path {
          fill: ${({theme:e})=>e.colors.neutral600};
        }
      }
    }
  }
`,u=r.default.forwardRef((D,y)=>{var h=D,{label:e,noBorder:l,children:t,icon:o,disabled:a,onClick:$,["aria-label"]:k}=h,g=T(h,["label","noBorder","children","icon","disabled","onClick","aria-label"]);const v=q=>{!a&&$&&$(q)};return e?r.default.createElement(V.Tooltip,{label:e},r.default.createElement(p,c(d({},g),{ref:y,noBorder:l,onClick:v,"aria-disabled":a}),r.default.createElement(_.VisuallyHidden,{as:"span"},e),f.cloneElement(o||t,{"aria-hidden":!0,focusable:!1}))):r.default.createElement(p,c(d({},g),{ref:y,noBorder:l,onClick:v,"aria-disabled":a}),r.default.createElement(_.VisuallyHidden,{as:"span"},k),f.cloneElement(o||t,{"aria-hidden":!0,focusable:!1}))});u.displayName="IconButton";u.defaultProps={label:void 0,noBorder:!1,disabled:!1,onClick:void 0};const i=(e,l)=>(t,o)=>{if(!t[o]&&e.every(a=>!t[a]))return new Error(`One of the following props is required: ${o}, ${e.join(", ")}`);n.default.checkPropTypes({[o]:n.default[l]},t,"prop","IconButton")};u.propTypes={["aria-label"]:i(["label"],"string"),children:i(["icon"],"node"),disabled:n.default.bool,icon:i(["children"],"node"),label:i(["aria-label"],"string"),noBorder:n.default.bool,onClick:n.default.func};exports.IconButton=u;exports.IconButtonGroup=P;
